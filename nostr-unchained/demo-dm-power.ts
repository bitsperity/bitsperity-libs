#!/usr/bin/env tsx
/**
 * üöÄ NOSTR-UNCHAINED DM POWER DEMO
 * 
 * Dieses Script beweist eindeutig, dass nostr-unchained DMs funktionieren:
 * 
 * ‚úÖ Echte NIP-17 End-to-End Verschl√ºsselung
 * ‚úÖ Echter privater Relay (ws://umbrel.local:4848)
 * ‚úÖ Echte secp256k1 Kryptographie
 * ‚úÖ Zero-Config Developer Experience
 * ‚úÖ Production-ready Components
 * 
 * Watch: Alice sendet verschl√ºsselte DM ‚Üí Bob empf√§ngt und entschl√ºsselt automatisch
 */

import { NostrUnchained } from './src/core/NostrUnchained.js';
import { LocalKeySigner } from './src/crypto/SigningProvider.js';
import * as secp256k1 from '@noble/secp256k1';
import { bytesToHex } from '@noble/hashes/utils';

// üîê Echte secp256k1 Private Keys (deterministic f√ºr Demo)
const ALICE_PRIVATE_KEY = '0000000000000000000000000000000000000000000000000000000000000001';
const BOB_PRIVATE_KEY = '0000000000000000000000000000000000000000000000000000000000000002';

// üåê Ihr echter privater Relay
const RELAY_URL = 'ws://umbrel.local:4848';

// üé® Sch√∂ne Konsolen-Ausgabe
const log = {
  title: (msg: string) => console.log(`\nüöÄ ${msg}`),
  step: (msg: string) => console.log(`   ‚Üí ${msg}`),
  success: (msg: string) => console.log(`   ‚úÖ ${msg}`),
  message: (sender: string, content: string) => console.log(`   üí¨ ${sender}: "${content}"`),
  error: (msg: string) => console.log(`   ‚ùå ${msg}`),
  separator: () => console.log('   ' + '‚îÄ'.repeat(60))
};

// üè≠ Production Signing Provider mit fixen Keys
class DemoSigner extends LocalKeySigner {
  private privateKey: string;

  constructor(privateKey: string) {
    super();
    this.privateKey = privateKey;
  }

  async getPublicKey(): Promise<string> {
    // Echter secp256k1 Public Key aus Private Key (wie in Production)
    return bytesToHex(secp256k1.schnorr.getPublicKey(this.privateKey));
  }

  async getPrivateKeyForEncryption(): Promise<string> {
    return this.privateKey;
  }
}

async function demonstrateNostrUnchainedPower(): Promise<void> {
  log.title('NOSTR-UNCHAINED DM POWER DEMONSTRATION');
  
  try {
    log.step('Initialisiere Alice und Bob mit echten Signing Providern...');
    
    // üë© Alice Setup - Production-ready
    const alice = new NostrUnchained({
      debug: false,
      relays: [RELAY_URL]
    });
    const aliceSigner = new DemoSigner(ALICE_PRIVATE_KEY);
    await alice.dm.updateSigningProvider(aliceSigner);
    
    // üë® Bob Setup - Production-ready  
    const bob = new NostrUnchained({
      debug: false,
      relays: [RELAY_URL]
    });
    const bobSigner = new DemoSigner(BOB_PRIVATE_KEY);
    await bob.dm.updateSigningProvider(bobSigner);
    
    log.success('Alice und Bob initialisiert');
    
    // üåê Verbindung zum echten Relay
    log.step('Verbinde zu echtem Relay ws://umbrel.local:4848...');
    await Promise.all([
      alice.connect(),
      bob.connect()
    ]);
    
    // Kurz warten f√ºr Relay-Verbindung
    await new Promise(resolve => setTimeout(resolve, 1000));
    log.success('Verbunden mit echtem Relay');
    
    // üí¨ DM Conversation Setup - Zero Config!
    log.step('Erstelle DM Conversations (Zero-Config)...');
    const alicesPubkey = await aliceSigner.getPublicKey();
    const bobsPubkey = await bobSigner.getPublicKey();
    
    log.step(`Alice PubKey: ${alicesPubkey}`);
    log.step(`Bob PubKey:   ${bobsPubkey}`);
    
    const aliceConversation = await alice.dm.with(bobsPubkey);
    const bobConversation = await bob.dm.with(alicesPubkey);
    
    log.success('DM Conversations erstellt');
    log.separator();
    
    // üì° Message Listener f√ºr Bob (auto-decrypt!)
    log.step('Bob h√∂rt auf eingehende verschl√ºsselte Messages...');
    let messageReceived = false;
    
    const unsubscribe = bobConversation.messages.subscribe(messages => {
      if (messages.length > 0) {
        const latestMessage = messages[messages.length - 1];
        if (latestMessage.content.includes('DEMO MESSAGE')) {
          log.success('Bob empf√§ngt und entschl√ºsselt automatisch:');
          log.message('Bob empfangen', latestMessage.content);
          log.success('üéâ AUTOMATIC DECRYPTION SUCCESSFUL!');
          messageReceived = true;
        }
      }
    });
    
    // üîê Alice sendet verschl√ºsselte Message
    log.step('Alice sendet verschl√ºsselte DM (NIP-17 + NIP-44 + NIP-59)...');
    const demoMessage = `DEMO MESSAGE: Hallo Bob! Das ist eine echte verschl√ºsselte DM um ${new Date().toLocaleTimeString()}`;
    
    log.message('Alice sendet', demoMessage);
    
    const sendResult = await aliceConversation.send(demoMessage);
    
    if (sendResult.success) {
      log.success('Message erfolgreich verschl√ºsselt und published!');
      log.step('üì° Message ID: ' + sendResult.messageId);
    } else {
      log.error('Send failed: ' + sendResult.error);
      return;
    }
    
    // ‚è±Ô∏è Warte auf Empfang
    log.step('Warte auf automatische Entschl√ºsselung bei Bob...');
    
    let attempts = 0;
    while (!messageReceived && attempts < 30) {
      await new Promise(resolve => setTimeout(resolve, 200));
      attempts++;
    }
    
    if (messageReceived) {
      log.separator();
      log.title('üéâ BEWEIS ERBRACHT!');
      log.success('‚úÖ Message wurde verschl√ºsselt (NIP-17/44/59)');
      log.success('‚úÖ Message wurde √ºber echten Relay gesendet');
      log.success('‚úÖ Message wurde automatisch entschl√ºsselt');
      log.success('‚úÖ Zero-Config Developer Experience');
      log.success('‚úÖ Production-ready Components verwendet');
      log.separator();
      log.title('NOSTR-UNCHAINED DM POWER: VOLLST√ÑNDIG BEWIESEN! üöÄ');
    } else {
      log.error('Message nicht rechtzeitig empfangen (Relay-Problem?)');
    }
    
    // üßπ Cleanup
    unsubscribe();
    await alice.disconnect();
    await bob.disconnect();
    
  } catch (error) {
    log.error('Demo failed: ' + (error as Error).message);
    console.error(error);
  }
}

// üé¨ Run the demonstration
demonstrateNostrUnchainedPower().then(() => {
  process.exit(0);
}).catch(error => {
  console.error('Fatal error:', error);
  process.exit(1);
});